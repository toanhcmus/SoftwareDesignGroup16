<!DOCTYPE html>

<html>

<head>
    <title>HappyGroup</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link type="text/css" href="/css/chapterPage.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&display=swap"
        rel="stylesheet">
    <link
        href='https://fonts.googleapis.com/css?family=Montez|Lobster|Josefin+Sans|Shadows+Into+Light|Pacifico|Amatic+SC:700|Orbitron:400,900|Rokkitt|Righteous|Dancing+Script:700|Bangers|Chewy|Sigmar+One|Architects+Daughter|Abril+Fatface|Covered+By+Your+Grace|Kaushan+Script|Gloria+Hallelujah|Satisfy|Lobster+Two:700|Comfortaa:700|Cinzel|Courgette'
        rel='stylesheet' type='text/css'>
</head>

<body>
    <button id="back-to-top-btn" class="drop-shadow-5px" onclick="scrollToTop()"> ^ </button>
    <div class="flex-container-vertical top-container">
        <H3 id="title-novel">
            <%= title%>
        </H3>
        <H5 id="title-chapter">
            Chương <%= chapter%>
        </H5>
        <div class="flex-container-horizontal toolbar">
            <button class="previous-chapter-button back-button" onclick="back()">
                <span>
                    Quay lại
                </span>
            </button>

            <button class="previous-chapter-button" onclick="<%= previousPage%>">
                <span>
                    Trước
                </span>
            </button>
            <select id="chapter-selector" onchange="onChapterSelected()">
                <%- chapterList %>
            </select>
            <button class="next-chapter-button" onclick="<%= nextPage%>">
                <span>
                    Sau
                </span>
            </button>

            <button class="toolbar-button" onclick="handleToolbar()">
                <span>
                    Công cụ
                </span>
            </button>

        </div>
        <div class="flex-container-horizontal toolbar hidden" id="toolbar">
            <div>
                <label for="text-color">Màu chữ</label>
                <input type="color" style="border:none" id="text-color" onchange="changeTextColor()">
            </div>

            <div>
                <label for="background-color">Màu nền</label>
                <input type="color" style="border:none" id="background-color" onchange="changeBackgroundColor()">
            </div>

            <div>
                <label for="font-size">Cỡ chữ</label>
                <input type="number" style="border:none" id="font-size" onchange="changeFontSize()">
            </div>


            <div>
                <label for="line-spacing">Khoảng cách dòng</label>
                <input type="number" style="border:none" id="line-spacing" onchange="changeLineSpacing()">
            </div>
            <label for="font-name">Font chữ</label>
            <select id="font-name" onchange="onFontChanged()">
            </select>
        </div>
        <div class="dropdown">
            <div class="btn-group">
                <button type="button" class="btn btn-success">Download</button>
                <button type="button" class="btn btn-success dropdown-toggle dropdown-toggle-split"
                    data-bs-toggle="dropdown" aria-expanded="false">
                    <span class="visually-hidden">Toggle Dropdown</span>
                </button>
                <ul class="dropdown-menu">
                    <li><button class="dropdown-item">pdf</button></li>
                    <li>
                        <hr class="dropdown-divider">
                    </li>
                    <li><button class="dropdown-item">epub</button></li>
                    <li>
                        <hr class="dropdown-divider">
                    </li>
                    <li><button class="dropdown-item">kpf</button></li>
                </ul>
            </div>
        </div>
    </div>




    <div class="flex-container-vertical main-container drop-shadow chapter" id="content">
        <%- content%>
    </div>
</body>

<script>
    var fonts = ["JetBrains Mono", "Montez", "Lobster", "Josefin Sans", "Shadows Into Light", "Pacifico", "Amatic SC", "Orbitron", "Rokkitt", "Righteous", "Dancing Script", "Bangers", "Chewy", "Sigmar One", "Architects Daughter", "Abril Fatface", "Covered By Your Grace", "Kaushan Script", "Gloria Hallelujah", "Satisfy", "Lobster Two", "Comfortaa", "Cinzel", "Courgette"];
    window.onscroll = function () { scrollFunction() };

    function getFontSize() {
        return document.getElementById("font-size").value;
    }

    function initializeChapterSelector() {
        var chapterSelector = document.getElementById("chapter-selector");
        chapterSelector.options[<%= chapter - 1 %>].selected = true;
    }

    function initializeFontSelector(fontList) {
        var fontSelector = document.getElementById("font-name")

        for (var a = 0; a < fonts.length; a++) {
            var opt = document.createElement('option');
            opt.value = opt.innerHTML = fonts[a];
            opt.style.fontFamily = fonts[a];
            fontSelector.add(opt);
        }
    }

    function onFontChanged() {
        var fontSelector = document.getElementById("font-name");
        var font = fontSelector.options[fontSelector.selectedIndex].text;

        var novel = document.getElementById("content");

        novel.style.setProperty("font-family", `${font}`);
        storeData();
    }

    function setFont(font) {
        var novel = document.getElementById("content");
        var fontSelector = document.getElementById("font-name");

        for (var i = 0; i < fontSelector.options.length; ++i) {
            if (fontSelector.options[i].text === font) {
                fontSelector.options[i].selected = true;
            }
        }

        novel.style.setProperty("font-family", `${font}`);
        storeData();
    }

    function setFontSize(fontSize) {
        var novel = document.getElementById("content");
        document.getElementById("font-size").value = ~~fontSize;
        novel.style.setProperty("font-size", `${fontSize}px`);
        storeData();
    }

    function getTextColor() {
        return document.getElementById("text-color").value;
    }

    function getBackgroundColor() {
        return document.getElementById("background-color").value;
    }

    function getLineSpacing() {
        return document.getElementById("line-height").value;
    }

    function setLineSpacing(lineSpacing) {
        var novel = document.getElementById("content");
        document.getElementById("line-spacing").value = ~~lineSpacing;
        novel.style.setProperty("line-height", `${lineSpacing}`);
        storeData();
    }

    function setBackgroundColor(backgroundColor) {
        var novel = document.getElementById("content");
        document.getElementById("background-color").value = backgroundColor;
        novel.style.setProperty("background-color", `${backgroundColor}`);
        storeData();
    }

    function setTextColor(textColor) {
        var novel = document.getElementById("content");
        document.getElementById("text-color").value = textColor;
        novel.style.setProperty("Color", `${textColor}`);
        storeData();
    }

    function changeFontSize() {
        var novel = document.getElementById("content");
        var fontSize = document.getElementById("font-size").value;

        if (fontSize < 1) {
            alert("Kích thước font không thể nhỏ hơn 1");
            document.getElementById("font-size").value = 1;
            fontSize = 1;
            novel.style.setProperty("font-size", `${fontSize}px`);
            return;
        }

        novel.style.setProperty("font-size", `${fontSize}px`);
        console.log(`Changed Font size to ${fontSize}px`);

        storeData();
    }

    function onChapterSelected() {
        var chapterSelector = document.getElementById("chapter-selector");
        document.location = `chapter=${chapterSelector.selectedIndex + 1}`
    }

    function changeTextColor() {
        var novel = document.getElementById("content");
        const textColor = document.getElementById("text-color").value;

        novel.style.setProperty("color", `${textColor}`);
        console.log("changed color");
        storeData();
    }

    function changeBackgroundColor() {
        var novel = document.getElementById("content");
        const backgroundColor = document.getElementById("background-color").value;

        novel.style.setProperty("background-color", `${backgroundColor}`);
        console.log("changed color");
        storeData();
    }

    function changeLineSpacing() {
        var novel = document.getElementById("content");
        const lineSpacing = document.getElementById("line-spacing").value;

        novel.style.setProperty("line-height", `${lineSpacing}`);
        console.log("changed color");
        storeData();
    }

    function handleToolbar() {
        var toolbar = document.getElementById('toolbar');
        if (toolbar.classList.contains('hidden')) {
            toolbar.classList.remove('hidden');

            return;
        }

        toolbar.classList.add('hidden');
    }

    function back() {
        document.location = 'page=1';
    }

    function storeData() {
        const fontSize = document.getElementById("font-size").value;
        const textColor = document.getElementById("text-color").value;
        const backgroundColor = document.getElementById("background-color").value;
        const lineSpacing = document.getElementById("line-spacing").value;
        const font = document.getElementById("font-name").options[document.getElementById("font-name").selectedIndex].text;

        document.cookie = "font-size=" + fontSize + ";path=/";
        document.cookie = "text-color=" + textColor + ";path=/";
        document.cookie = "background-color=" + backgroundColor + ";path=/";
        document.cookie = "line-spacing=" + lineSpacing + ";path=/";
        document.cookie = "font=" + font + ";path=/";
    }

    function getCookie(cname) {
        let name = cname + "=";
        let ca = document.cookie.split(';');

        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }

        return "";
    }

    function checkCookie() {
        const fontSize = getCookie("font-size");
        const textColor = getCookie("text-color");
        const backgroundColor = getCookie("background-color");
        const lineSpacing = getCookie("line-spacing");
        const font = getCookie("font");

        if (fontSize != "") {
            setFontSize(fontSize);
        } else {
            setFontSize("13");
        }

        if (textColor != "") {
            setTextColor(textColor);
        } else {
            setTextColor("#000000");
        }

        if (textColor != "") {
            setTextColor(textColor);
        } else {
            setTextColor("#000000");
        }

        if (backgroundColor != "") {
            setBackgroundColor(backgroundColor);
        } else {
            setBackgroundColor("#EDEBDF");
        }

        if (lineSpacing != "") {
            setLineSpacing(lineSpacing);
        } else {
            setLineSpacing("1");
        }

        if (font != "") {
            setFont(font);
        } else {
            setFont("inherit");
        }

        console.log('Cookie Checked');
        storeData();
    }

    function scrollToTop() {
        document.body.scrollTop = 0; // For Safari
        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    }

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("back-to-top-btn").style.display = "block";
        } else {
            document.getElementById("back-to-top-btn").style.display = "none";
        }
    }

    document.querySelectorAll('.dropdown-item').forEach(typeExportFile => {
        typeExportFile.addEventListener('click', async function (event) {
            const typeFileText = event.target.innerText;
            const title = document.getElementById('title-novel').innerHTML.trim();
            const titleChapter = document.getElementById('title-chapter').innerHTML.trim();
            const content = document.getElementById('content').innerHTML;
            try {
                dataSend = { typeFile: typeFileText, title: title, titleChapter: titleChapter, content: content }
                console.log(dataSend);
                const response = await fetch('/download', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(dataSend)
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                // Chuyển đổi phản hồi thành một blob
                const blob = await response.blob();

                // Tạo một URL tạm thời cho blob
                const url = window.URL.createObjectURL(blob);

                // Tạo một phần tử a tạm thời để tải xuống file
                const a = document.createElement('a');
                a.href = url;
                a.download = `${title + " " + titleChapter + "." + typeFileText}`;
                document.body.appendChild(a);
                a.click();
                a.remove();

                // Giải phóng URL tạm thời
                window.URL.revokeObjectURL(url);
            } catch (error) {
                console.error('Error:', error);
            }
        });
    });


    initializeFontSelector(fonts);
    initializeChapterSelector();
    checkCookie();

</script>

</html>